{"ast":null,"code":"var _jsxFileName = \"/Users/philranzato/Documents/GoLang/go/src/k8s-intro/react/webapp/src/components/connection.js\";\nimport React from 'react';\nlet endpoint = \"http://localhost\";\n\nclass Connection extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      connResult: \"\",\n      resultMessage: \"Result\"\n    };\n  }\n\n  refreshResult(result) {\n    switch (result) {\n      case true:\n        this.setState({\n          connResult: \"green\",\n          resultMessage: \"Connection Succeded\"\n        });\n        break;\n\n      case false:\n        this.setState({\n          connResult: \"red\",\n          resultMessage: \"Connection Error\"\n        });\n        break;\n\n      default:\n        this.setState({\n          connResult: \"white\",\n          resultMessage: \"Something went wrong, try reloading the page..\"\n        });\n        break;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    const from = data.get(\"from\");\n    const fromNS = data.get(\"fromNamespace\");\n    const to = data.get(\"to\");\n    const toNS = data.get(\"toNamespace\");\n    const body = {\n      \"from\": from,\n      \"fromNamespace\": fromNS,\n      \"to\": to,\n      \"toNamespace\": toNS\n    };\n    fetch(endpoint + '/api/test-connection', {\n      method: 'POST',\n      body: JSON.stringify(body)\n    }).then(res => {\n      res.json().then(data => {\n        switch (data) {\n          case \"true\":\n            this.refreshResult(true);\n            break;\n\n          case \"false\":\n            this.refreshResult(false);\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      style: {\n        verticalAlign: \"true\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"podFrom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, \"Enter pod from\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"podFrom\",\n      name: \"from\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"podFrom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"Enter pod from namespace\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"podFromNs\",\n      name: \"fromNamespace\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"podFrom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, \"Enter service to\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"svcTo\",\n      name: \"to\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"podFrom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Enter service to namespace\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"svcToNs\",\n      name: \"toNamespace\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, \"Test Connection!\")), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        backgroundColor: this.state.connResult\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, this.state.resultMessage));\n  }\n\n}\n\n;\nexport default Connection;","map":{"version":3,"sources":["/Users/philranzato/Documents/GoLang/go/src/k8s-intro/react/webapp/src/components/connection.js"],"names":["React","endpoint","Connection","Component","constructor","handleSubmit","bind","state","connResult","resultMessage","refreshResult","result","setState","event","preventDefault","data","FormData","target","from","get","fromNS","to","toNS","body","fetch","method","JSON","stringify","then","res","json","render","verticalAlign","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\n\nlet endpoint = \"http://localhost\";\n\nclass Connection extends React.Component {\n    constructor() {\n        super();\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = { connResult: \"\", resultMessage: \"Result\" };\n    }\n\n    refreshResult(result) {\n        switch (result) {\n            case true:\n                this.setState({\n                    connResult: \"green\",\n                    resultMessage: \"Connection Succeded\"\n                })\n                break;\n            case false:\n                this.setState({\n                    connResult: \"red\",\n                    resultMessage: \"Connection Error\"\n                });\n                break;\n            default:\n                this.setState({\n                    connResult: \"white\",\n                    resultMessage: \"Something went wrong, try reloading the page..\"\n                })\n                break;\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const data = new FormData(event.target);\n        const from = data.get(\"from\")\n        const fromNS = data.get(\"fromNamespace\")\n        const to = data.get(\"to\")\n        const toNS = data.get(\"toNamespace\")\n\n        const body = {\n            \"from\": from,\n            \"fromNamespace\": fromNS,\n            \"to\": to,\n            \"toNamespace\": toNS\n        }\n\n        fetch(endpoint + '/api/test-connection', {\n            method: 'POST',\n            body: JSON.stringify(body),\n        }).then((res) => {\n            res.json().then(data => {\n                switch (data) {\n                    case \"true\":\n                        this.refreshResult(true)\n                        break;\n                    case \"false\":\n                        this.refreshResult(false)\n                        break;\n                    default:\n                        break;\n                }\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit} style={{ verticalAlign: \"true\" }}>\n                    <label htmlFor=\"podFrom\">Enter pod from</label>\n                    <input id=\"podFrom\" name=\"from\" type=\"text\" />\n\n                    <label htmlFor=\"podFrom\">Enter pod from namespace</label>\n                    <input id=\"podFromNs\" name=\"fromNamespace\" type=\"text\" />\n\n                    <label htmlFor=\"podFrom\">Enter service to</label>\n                    <input id=\"svcTo\" name=\"to\" type=\"text\" />\n\n                    <label htmlFor=\"podFrom\">Enter service to namespace</label>\n                    <input id=\"svcToNs\" name=\"toNamespace\" type=\"text\" />\n\n                    <button>Test Connection!</button>\n                </form>\n                <span style={{ backgroundColor: this.state.connResult }}>{this.state.resultMessage}</span>\n            </div>\n        );\n    }\n};\n\nexport default Connection\n"]},"metadata":{},"sourceType":"module"}